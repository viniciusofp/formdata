{"version":3,"sources":["components/Auth.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["AuthForm","state","_this2","this","react_default","a","createElement","onSubmit","e","props","className","htmlFor","id","type","placeholder","name","Component","Main","handleSubmit","_callee","body","options","response","regenerator_default","wrap","_context","prev","next","preventDefault","url","target","value","username","password","console","log","method","baseURL","concat","headers","Content-Type","Cache-Control","data","axios","sent","t0","stop","Auth","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQA2CeA,6MAxCbC,MAAQ,2EACC,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAU,SAAAC,GAAC,OAAIN,EAAKO,MAAMF,SAASC,KACvCJ,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACbN,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,YAAf,wBACAP,EAAAC,EAAAC,cAAA,SACEM,GAAG,WACHC,KAAK,OACLH,UAAU,eACVI,YAAY,uBACZC,KAAK,SAGTX,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACbN,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,aAAf,cACAP,EAAAC,EAAAC,cAAA,SACEM,GAAG,YACHC,KAAK,OACLH,UAAU,eACVI,YAAY,aACZC,KAAK,cAGTX,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACbN,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,aAAf,SACAP,EAAAC,EAAAC,cAAA,SACEM,GAAG,YACHC,KAAK,OACLH,UAAU,eACVI,YAAY,QACZC,KAAK,cAGTX,EAAAC,EAAAC,cAAA,UAAQI,UAAU,yBAAlB,sBAnCeM,8BC+CRC,6MA5CbhB,MAAQ,KACRiB,mDAAe,SAAAC,EAAMX,GAAN,IAAAY,EAAAC,EAAAC,EAAA,OAAAC,EAAAlB,EAAAmB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbnB,EAAEoB,iBACER,EAAO,CACTS,IAAKrB,EAAEsB,OAAOD,IAAIE,MAClBC,SAAUxB,EAAEsB,OAAOE,SAASD,MAC5BE,SAAUzB,EAAEsB,OAAOG,SAASF,OAE9BG,QAAQC,IAAIf,GACNC,EAAU,CACde,OAAQ,OACRC,QAAO,GAAAC,OAAKlB,EAAKS,IAAV,SACPU,QAAS,CACPC,eAAgB,mBAChBC,gBAAiB,YAEnBC,KAAM,CACJV,SAAUZ,EAAKY,SACfC,SAAUb,EAAKa,WAjBNR,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAqBUgB,IAAMtB,GArBhB,OAqBPC,EArBOG,EAAAmB,KAsBXV,QAAQC,IAAIb,EAASoB,MAtBVjB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,SAwBXS,QAAQC,IAARV,EAAAoB,IAxBW,yBAAApB,EAAAqB,SAAA3B,EAAA,gJA4Bb,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kBACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,8BACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,2CACbN,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAACyC,EAAD,CAAUxC,SAAUJ,KAAKe,0BApCpBF,aCOJgC,MARf,WACE,OACE5C,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAC2C,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db8af66a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass AuthForm extends Component {\n  state = {};\n  render() {\n    return (\n      <form onSubmit={e => this.props.onSubmit(e)}>\n        <div className=\"form-group\">\n          <label htmlFor=\"urlInput\">Url do Formul치rio</label>\n          <input\n            id=\"urlInput\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Url do Formul치rio\"\n            name=\"url\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"userInput\">Usu치rio</label>\n          <input\n            id=\"userInput\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Usu치rio\"\n            name=\"username\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"passInput\">Senha</label>\n          <input\n            id=\"passInput\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Senha\"\n            name=\"password\"\n          />\n        </div>\n        <button className=\"btn btn-primary w-100\">Autenticar</button>\n      </form>\n    );\n  }\n}\n\nexport default AuthForm;\n","import React, { Component } from \"react\";\nimport AuthForm from \"./Auth\";\nimport axios from \"axios\";\n\nclass Main extends Component {\n  state = {};\n  handleSubmit = async e => {\n    e.preventDefault();\n    var body = {\n      url: e.target.url.value,\n      username: e.target.username.value,\n      password: e.target.password.value\n    };\n    console.log(body);\n    const options = {\n      method: \"post\",\n      baseURL: `${body.url}login`,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"no-cache\"\n      },\n      data: {\n        username: body.username,\n        password: body.password\n      }\n    };\n    try {\n      var response = await axios(options);\n      console.log(response.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"container mt-5\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-12 col-md-10 col-lg-8 col-xl-6 mt-3\">\n              <h1>Creativex Form Data</h1>\n              <AuthForm onSubmit={this.handleSubmit} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}